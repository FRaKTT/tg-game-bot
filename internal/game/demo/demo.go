package demo

import gamePkg "github.com/fraktt/tg-game-bot/internal/game"

const (
	stepStart = iota + 1
	stepGreeting
	stepIntro

	stepCosmonautQuestion
	stepCosmonautVariants
	stepCosmonautBadAnswer

	stepSpiderQuestion
	stepSpiderVariants
	stepSpiderBadAnswer
	stepSpiderRightAnswer

	stepSnowQuestion
	stepSnowVariants
	stepSnowBadAnswer
	stepSnowRightAnswer

	stepVaultOpened
	stepCongrats
	stepFinish
)

// DemoGameSteps - –¥–µ–º–æ-–∏–≥—Ä–∞
var DemoGameSteps = []gamePkg.Step{ //nolint:gochecknoglobals // demo
	// Intro
	gamePkg.LinearStep{
		ID:         stepStart,
		Name:       "Start",
		Message:    "–ü—Ä–∏–≤–µ—Ç!",
		NextStepID: stepGreeting,
	},
	gamePkg.ForkStep{ // –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
		ID:       stepGreeting,
		Name:     "Greeting",
		Variants: []string{"–ü—Ä–∏–≤–µ—Ç!"},
		NextSteps: map[string]int{
			"–ü—Ä–∏–≤–µ—Ç!": stepIntro,
		},
		DefaultNextStep: stepIntro,
	},
	gamePkg.LinearStep{
		ID:         stepIntro,
		Name:       "Intro",
		Message:    "–î–ï–ú–û –ò–ì–†–ê",
		NextStepID: stepCosmonautQuestion,
	},

	gamePkg.LinearStep{
		ID:         stepCosmonautQuestion,
		Name:       "CosmonautQuestion",
		Message:    "–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: –Ω–∞–∑–æ–≤–∏ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä–≤–æ–≥–æ –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∞",
		NextStepID: stepCosmonautVariants,
	},
	gamePkg.ForkStep{
		ID:       stepCosmonautVariants,
		Name:     "CosmonautVariants",
		Variants: []string{"–¢–µ—Ä–µ—à–∫–æ–≤–∞", "–ì–∞–≥–∞—Ä–∏–Ω", "–õ–µ–æ–Ω–æ–≤", "–¢–∏—Ç–æ–≤"},
		NextSteps: map[string]int{
			"–¢–µ—Ä–µ—à–∫–æ–≤–∞": stepCosmonautBadAnswer,
			"–ì–∞–≥–∞—Ä–∏–Ω":   stepSpiderQuestion,
			"–õ–µ–æ–Ω–æ–≤":    stepCosmonautBadAnswer,
			"–¢–∏—Ç–æ–≤":     stepCosmonautBadAnswer,
		},
	},
	gamePkg.LinearStep{
		ID:         stepCosmonautBadAnswer,
		Name:       "CosmonautBadAnswer",
		Message:    "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑",
		NextStepID: stepCosmonautVariants,
	},

	gamePkg.LinearStep{
		ID:         stepSpiderQuestion,
		Name:       "SpiderQuestion",
		Message:    "–°–∫–æ–ª—å–∫–æ –ª–∞–ø –ø–∞—É–∫–∞?",
		NextStepID: stepSpiderVariants,
	},
	gamePkg.ForkStep{
		ID:       stepSpiderVariants,
		Name:     "SpiderVariants",
		Variants: []string{"–ß–µ—Ç—ã—Ä–µ", "–®–µ—Å—Ç—å", "–í–æ—Å–µ–º—å", "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å"},
		NextSteps: map[string]int{
			"–ß–µ—Ç—ã—Ä–µ":      stepSpiderBadAnswer,
			"–®–µ—Å—Ç—å":       stepSpiderBadAnswer,
			"–í–æ—Å–µ–º—å":      stepSpiderRightAnswer,
			"–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å": stepSpiderBadAnswer,
		},
	},
	gamePkg.LinearStep{
		ID:         stepSpiderBadAnswer,
		Name:       "SpiderBadAnswer",
		Message:    "–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑",
		NextStepID: stepSpiderVariants,
	},
	gamePkg.LinearStep{
		ID:         stepSpiderRightAnswer,
		Name:       "SpiderRightAnswer",
		Message:    "üï∏",
		NextStepID: stepSnowQuestion,
	},

	gamePkg.LinearStep{
		ID:         stepSnowQuestion,
		Name:       "WaistQuestion",
		Message:    "–ù–∞ –¥–≤–æ—Ä–µ –≥–æ—Ä–æ–π, –∞ –≤ –∏–∑–±–µ –≤–æ–¥–æ–π. –ß—Ç–æ —ç—Ç–æ?",
		NextStepID: stepSnowVariants,
	},
	gamePkg.ForkStepOpenQuestion{
		ID:            stepSnowVariants,
		Name:          "WaistVariants",
		RightAnswers:  []string{"–°–Ω–µ–≥", "Cytu"}, // –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ ;)
		NextStepRight: stepSnowRightAnswer,
		NextStepWrong: stepSnowBadAnswer,
	},
	gamePkg.LinearStep{
		ID:         stepSnowBadAnswer,
		Name:       "WaistBadAnswer",
		Message:    "–ù–µ–∞",
		NextStepID: stepSnowVariants,
	},
	gamePkg.LinearStep{
		ID:         stepSnowRightAnswer,
		Name:       "WaistRightAnswer",
		Message:    "–¢–æ—á–Ω–æ!",
		NextStepID: stepCongrats,
	},

	gamePkg.LinearStepRandomMsg{
		ID:   stepCongrats,
		Name: "Congrats",
		RandomMessages: []string{
			"–£—Ä–∞! –ò–≥—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω–∞",
			"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –æ—Ç–≤–µ—Ç–∏–ª(–∞) –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã",
		},
		NextStepID: stepFinish,
	},
	gamePkg.ForkStep{
		ID:       stepFinish,
		Name:     "Finish",
		Variants: []string{"–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÅ"},
		NextSteps: map[string]int{
			"–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÅ": stepIntro,
		},
		DefaultDoNothing: true,
	},
}
